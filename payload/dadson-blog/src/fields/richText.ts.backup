// Placeholder for the custom Rich Text field definition
// The full definition is provided in the plan for Day 3-4

// Import local types instead of payload types
import type { RichTextField, RichTextElement, RichTextLeaf } from '../payload-declarations.js';
import deepMerge from '../utilities/deepMerge.js'; // Utility for merging field configurations
import link from './link.js'; // Custom link field configuration
import Video from '../blocks/Video.js'; // Import the Video block
import CallToAction from '../blocks/CallToAction.js'; // Import the CTA block
import { slateEditor } from '@payloadcms/richtext-slate';

// Define which default elements and leaves are enabled
// See: https://payloadcms.com/docs/rich-text/slate#elements
// See: https://payloadcms.com/docs/rich-text/slate#leaves
export const defaultEditorElements = [
  'h2',
  'h3',
  'h4',
  'h5',
  'h6',
  'link', // Use our custom link field
  'ol',
  'ul',
  'indent',
  'blockquote',
  'upload', // Default upload element
  'relationship', // Default relationship element
];

export const defaultEditorLeaves = [
  'bold',
  'italic',
  'underline',
  'strikethrough',
  'code', // Inline code leaf
];

/**
 * Defines a custom RichText field with simplified configuration
 */
const richText = ({ overrides = {}, additions = {} } = {}) => {
  const { elements = [], leaves = [], blocks = [] } = additions;

  // Base RichText field configuration using Slate editor
  const baseRichTextField = {
    name: 'richText',
    type: 'richText',
    required: true,
    editor: slateEditor({
      admin: {
        // These need to be handled by Payload's type system
        elements: [
          ...defaultEditorElements,
          ...elements,
        ],
        leaves: [
          ...defaultEditorLeaves,
          ...leaves,
        ],
      },
    }),
  };

  // Merge overrides into the base configuration
  return deepMerge(baseRichTextField, overrides);

  // NOTE: The block-based layout approach from the original plan is powerful
  // but adds complexity. Starting with a more standard richText setup.
  // If block layout is strictly needed, uncomment and adapt the code below.

  /*
  // Alternative: Block-based layout approach (More complex)
  const layoutBlock = {
    slug: 'layoutBlock', // Use a consistent slug
    labels: { singular: 'Layout Block', plural: 'Layout Blocks' },
    fields: [
      {
        name: 'blockType',
        type: 'radio',
        options: [
          { label: 'Content', value: 'content' },
          { label: 'Call to Action', value: 'cta' },
          { label: 'Video', value: 'video' },
          ...blocks.map(b => ({ label: b.labels.singular, value: b.slug })) // Add custom blocks
        ],
        defaultValue: 'content',
        admin: {
          layout: 'horizontal',
        },
      },
      {
        // Standard rich text content
        name: 'contentRichText',
        label: 'Content',
        type: 'richText',
        editor: slateEditor({
          admin: {
             elements: [...defaultEditorElements, ...elements],
             leaves: [...defaultEditorLeaves, ...leaves],
             link: link,
             upload: { ... }, // Add upload config if needed within this block
          }
        }),
        admin: {
          condition: (_, { blockType } = {}) => blockType === 'content',
        },
      },
      {
        // CallToAction block fields nested
        label: 'Call to Action Settings',
        name: 'callToAction',
        type: 'group',
        fields: CallToAction.fields,
        admin: {
          condition: (_, { blockType } = {}) => blockType === 'cta',
        },
      },
      {
        // Video block fields nested
        label: 'Video Settings',
        name: 'video',
        type: 'group',
        fields: Video.fields,
        admin: {
          condition: (_, { blockType } = {}) => blockType === 'video',
        },
      },
      // Spread fields from additional custom blocks here
    ],
  };

  const fieldWithBlocks: RichTextField = {
    name: 'layout',
    type: 'blocks', // Use Payload's Blocks field type
    label: 'Content Layout',
    minRows: 1,
    blocks: [
      layoutBlock, // Only one block type needed for this layout approach
      ...blocks // Add other top-level blocks if necessary
    ],
  };

  return deepMerge(fieldWithBlocks, overrides);
  */
};

export default richText; 